daemon off;

env DOCUMENT_ROOT;

user  root;
worker_processes  auto;
error_log /var/log/nginx/error.log info;

events {
    worker_connections  4096;
}

http {
    include       mime.types;
    include       gzip_params;

    # add svg to possible gzip target
    gzip_types image/svg+xml;

    server_tokens off;
    default_type  application/octet-stream;

    client_max_body_size 32m;

    access_log  /var/log/nginx/access.log;

    sendfile        on;

    keepalive_timeout 650;
    keepalive_requests 10000;

    map $http_x_forwarded_proto $fastcgi_https {
        default '';
        https on;
    }

    #get real ip adress
    real_ip_header X-Forwarded-For;
    set_real_ip_from 0.0.0.0/0;
    set_real_ip_from 0::/0;
    real_ip_recursive on;
    satisfy any;

    upstream php-fpm {
        server 127.0.0.1:9000 max_fails=3 fail_timeout=3s;
    }

    server {
#        server_name local-at-ftiportal\.gcloud\.fti-group\.com$ local-ch-ftiportal\.gcloud\.fti-group\.com$ local-de-ftiportal\.gcloud\.fti-group\.com$ local-fr-ftiportal\.gcloud\.fti-group\.com$ local-nl-ftiportal\.gcloud\.fti-group\.com$;
        server_name localhost;

        listen       8080;
        port_in_redirect off;

        set $test "";

        # only redirect if we are not on local path and forwared proto header has no https inside
        if ($host  !~* ^local) {
          set $test  A;
        }

        if ($http_x_forwarded_proto != "https") {
          set $test  "${test}B";
        }

#        if ($test = AB) {
#          rewrite ^(.*)$ https://$host$1 permanent;
#        }

#        root $apiroot;
        root /app/public;

        # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|mp4|ogg|ogv|webm|htc)$ {
          expires 24h;
          access_log off;
          etag on;
          add_header Cache-Control "public";
        }

        # CSS and Javascript
        location ~* \.(?:css|js)$ {
          expires 24h;
          access_log off;
          etag on;
          add_header Cache-Control "public";
        }

        # Fonts (could be problematic if we start to use CDN)
        location ~* \.(?:eot|woff|woff2|tff|svg|svgz)$ {
           set $cors 'true';

           if ($request_method = 'OPTIONS') {
               set $cors "${cors}options";
           }
           if ($request_method = 'GET') {
               set $cors "${cors}get";
           }
           if ($request_method = 'POST') {
               set $cors "${cors}post";
           }

           if ($cors = "true") {
               add_header 'Access-Control-Allow-Origin' "$http_origin";
           }

           if ($cors = "trueget") {
               add_header 'Access-Control-Allow-Origin' "$http_origin";
               add_header 'Access-Control-Allow-Credentials' 'true';
               add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
               add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
           }

           if ($cors = "trueoptions") {
               add_header 'Access-Control-Allow-Origin' "$http_origin";
               add_header 'Access-Control-Allow-Credentials' 'true';
               add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
               add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
               add_header 'Access-Control-Max-Age' 1728000;
               add_header 'Content-Type' 'text/plain charset=UTF-8';
               add_header 'Content-Length' 0;
               return 204;
           }

           if ($cors = "truepost") {
               add_header 'Access-Control-Allow-Origin' "$http_origin";
               add_header 'Access-Control-Allow-Credentials' 'true';
               add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
               add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

           }
            expires 24h;
            etag on;
            add_header Cache-Control "public";
        }

        index index.php index.html;

        # pass the PHP scripts to FastCGI server
        location ~ \.php$ {
          try_files $uri =404;
          fastcgi_split_path_info ^(.+?\.php)(/.*)$;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          fastcgi_param ORIG_PATH_TRANSLATED $document_root$fastcgi_script_name;
          fastcgi_pass php-fpm;
          fastcgi_buffer_size 16k;
          fastcgi_buffers 256 16k;
          fastcgi_busy_buffers_size 4064k;
          fastcgi_max_temp_file_size 0;
          fastcgi_index index.php;
          include fastcgi_params;
          fastcgi_read_timeout 600s;
          #xdebug
        }

        # Drop accesses for some files
        location = /favicon.ico { access_log off; log_not_found off; }
        #location = /robots.txt  { access_log off; log_not_found off; }
        location ~ /\.          { access_log off; log_not_found off; deny all; }
        location ~ ~$           { access_log off; log_not_found off; deny all; }

        client_max_body_size 100M;

        if (!-e $request_filename){
            rewrite ^/(.+)\.(\d+)\.(php|js|css|png|jpg|gif|gzip)$ /$1.$3 last;
        }

        location ~* ^/fileadmin/(.*/)?_recycler_/ {
            deny all;
        }
        location ~* ^/fileadmin/templates/.*(\.txt|\.ts)$ {
            deny all;
        }
        location ~* ^/typo3conf/ext/[^/]+/Resources/Private/ {
            deny all;
        }
        location ~* ^/(typo3/|fileadmin/|typo3conf/|typo3temp/|uploads/|favicon\.ico) {
        }

        # setup as recommended for tx_staticfilecache (ATTENTION ... not nc_staticfilecache)
        location / {
            try_files $uri $uri/ @sfc;
        }

        # Special root site case. prevent "try_files $uri/" + "index" from skipping the cache
        # by accessing /index.php directly
        location =/ {
            recursive_error_pages on;
            error_page 405 = @sfc;
            return 405;
        }

        location @t3frontend {
            # Using try_files for ease of configuration demonstration here,
            # you can also fastcgi_pass directly to php here
            try_files $uri /index.php$is_args$args;
        }

        location @sfc {
            # Perform an internal redirect to TYPO3 if any of the required
            # conditions for static file cache don't match
            error_page 405 = @t3frontend;

            # Query String needs to be empty
            if ($args != '') {
                return 405;
            }

            # We can't serve static files for logged-in BE/FE users
            if ($cookie_staticfilecache = 'fe_typo_user_logged_in') {
                return 405;
            }
            if ($cookie_be_typo_user != '') {
                return 405;
            }

            # Ensure we redirect to TYPO3 for non GET/HEAD requests
            if ($request_method !~ ^(GET|HEAD)$ ) {
                return 405;
            }

            charset utf8;
            try_files /typo3temp/tx_staticfilecache/${scheme}/${host}${uri}/index.html
                      /typo3temp/tx_staticfilecache/${scheme}/${host}${uri}
                      =405;
        }

        location /typo3temp/tx_staticfilecache {
            deny all;
        }

    }
}
